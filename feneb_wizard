#!/bin/bash
#-------------------------------------------------------------------------------------------------------------
# This is an example script to run a FENEB optimization starting with
# an initial band of NIMAGES images, and running them in parallel.
#
# It is assumed that at least NCPU cpu threads are available.
#
# Written by Jonathan A. Semelak
#-------------------------------------------------------------------------------------------------------------
SANDER=sander                                         #Should be replaced by the corresponding path to sander
FENEB=feneb                                           #Should be replaced by the corresponding path to feneb
MDIN=prod.mdin                                        #Sander input
TOPOLOGY=SYSTEM.prmtop                                #Topology file
NAME=SYSTEM                                           #Prefix for all coordinates files.
NIMAGES=15                                            #Number of images
NCPU=1                                                #Number of available CPU threads
STARTSTEP=1                                           #Starting optimization step.
MAXSTEPS=10                                           #Maximum optimization steps to be performed.
DELETENC=1                                            #Delete .nc files after processing ("1" for True)
GREPEVOLUTION=1                                       #Append band and maxgrad evolution ("1" for True)
NAPTIME=10                                            #How long should the script sleep
NAPUNITS=s                                            #In which units (h,s,m)
#-------------------------------------------------------------------------------------------------------------
#NOTES:
#[1] The directory where this script is executed must contain an "inputs" directory, with $TOPOLOGY, $MDIN,
# feneb.in, feneb.extrema1 and feneb.extrema2 files (note it is assumed "rextrema" is set to True in
# feneb.ini) as well as a directory called called $STARTSTEP-1, with the coordinates corresponding to
# the previous band ("0", in case $STARTSTEP=1).
# This directory is automatically generated, but if this is the first step, must be manually created
#[2] Before executing the feneb code, this script checks whether the $NIMAGES MD runs have finished or not
# If it is not the case, the scriptsleeps a $NAPTIME $m time and checks again
# Usually only a couple of minutes (or even seconds) are necesary
#-------------------------------------------------------------------------------------------------------------

# Function to print a help message
print_help() {
  echo "Usage: ./feneb_script.sh [OPTIONS]"
  echo "Options: [default]"
  echo "-s  path to sander [sander]"
  echo "-f  path to feneb [feneb]"
  echo "-c  numer of cpu threads available [1]"
  echo "-m  sander input [prod.mdin]"
  echo "-t  topology file [SYSTEM.prmtop]"
  echo "-n  prefix for all coordinates files [SYSTEM]"
  echo "-  number of images [15]"
  echo "-x  starting optimization step [1]"
  echo "-d  maximum optimization steps to be performed [10]"
  echo "-g  delete .nc files after processing (1 for True) [1]"
  echo "-a  append band and maxgrad evolution (1 for True) [1]"
  echo "-r  use fenen.extrema files (1 for True) [1]"
  echo "-u  how long should the script sleep [10]"
  echo "-v  in which units [s]"
}

# Parse command line arguments
while getopts "hs:f:m:c:t:n:i:x:d:g:a:r:u:" opt; do
  case ${opt} in
    h ) print_help
        exit 0
      ;;
    s ) SANDER=$OPTARG
      ;;
    f ) FENEB=$OPTARG
      ;;
    m ) MDIN=$OPTARG
      ;;
    c ) NCPU=$OPTARG
        if ! [[ "$NCPU" =~ ^[0-9]+$ ]]
        then
          echo "Error: -c option requires a numeric argument."
          exit 1
        fi
      ;;
    t ) TOPOLOGY=$OPTARG
      ;;
    n ) NAME=$OPTARG
      ;;
    i ) NIMAGES=$OPTARG
        if ! [[ "$NIMAGES" =~ ^[0-9]+$ ]]
        then
          echo "Error: -i option requires a numeric argument."
          exit 1
        fi
      ;;
    x ) STARTSTEP=$OPTARG
        if ! [[ "$STARTSTEP" =~ ^[0-9]+$ ]]
        then
          echo "Error: -x option requires a numeric argument."
          exit 1
        fi
      ;;
    d ) MAXSTEPS=$OPTARG
        if ! [[ "$MAXSTEPS" =~ ^[0-9]+$ ]]
        then
          echo "Error: -d option requires a numeric argument."
          exit 1
        fi
      ;;
    g ) DELETENC=$OPTARG
        if ! [[ "$DELETENC" =~ ^[0-9]+$ ]]
        then
          echo "Error: -g option requires a numeric argument."
          exit 1
        fi
      ;;
    a ) GREPEVOLUTION=$OPTARG
        if ! [[ "$GREPEVOLUTION" =~ ^[0-9]+$ ]]
        then
          echo "Error: -a option requires a numeric argument."
          exit 1
        fi
      ;;
    r ) REXTREMA=$OPTARG
        if ! [[ "$REXTREMA" =~ ^[0-9]+$ ]]
        then
          echo "Error: -r option requires a numeric argument."
          exit 1
        fi
      ;;
    u ) NAPTIME=$OPTARG
        if ! [[ "$NAPTIME" =~ ^[0-9]+$ ]]
        then
          echo "Error: -u option requires a numeric argument."
          exit 1
        fi
      ;;
    * ) echo "Invalid option"
        exit 1
      ;;
  esac
done

# Function to check if a variable is a number
is_num() {
  if ! echo "$1" | grep -E -q '^[0-9]+$'; then
    echo "Error: $2 is not a number."
    exit 1
  fi
}

# Check if the number of images is greater than 2
is_num "$NIMAGES" "NIMAGES"
if [ "$NIMAGES" -le 2 ]; then
  if [ "$NIMAGES" -eq 1 ]; then
    echo "NIMAGES=1 did you mean to perform a free energy optimization?"
  else
    echo "Error: NIMAGES must be greater than 2."
    exit 1
  fi
fi

# Check if NAPUNITS is either 's', 'm', or 'd'
if ! echo "$NAPUNITS" | grep -E -q '^[smd]$'; then
  echo "Error: NAPUNITS must be either 's', 'm', or 'd'."
  exit 1
fi

# Check if DELETENC, REXTREMA, and GREPEVOLUTION are either '1' or '0'
for var in "DELETENC" "REXTREMA" "GREPEVOLUTION"; do
  if ! echo "${!var}" | grep -E -q '^[01]$'; then
    echo "Error: $var must be either '1' or '0'."
    exit 1
  fi
done

# Check if NCPU is a number
is_num "$NCPU" "NCPU"

# Check NCPU against NIMAGES or NIMAGES-2 based on REXTREMA value
if [ "$REXTREMA" -eq 1 ]; then
  if [ "$NCPU" -gt "$(($NIMAGES - 2))" ]; then
    echo "NCPU cannot be larger than NIMAGES-2 when REXTREMA=1. Setting NCPU to NIMAGES-2."
    NCPU="$(($NIMAGES - 2))"
  fi
elif [ "$REXTREMA" -eq 0 ]; then
  if [ "$NCPU" -gt "$NIMAGES" ]; then
    echo "NCPU cannot be larger than NIMAGES when REXTREMA=0. Setting NCPU to NIMAGES."
    NCPU="$NIMAGES"
  fi
fi

# Make sure NCPU is still a positive integer after any adjustments
if [ "$NCPU" -le 0 ]; then
  echo "Error: NCPU must be a positive integer."
  exit 1
fi


# Check if inputs directory exists
if [ ! -d "inputs" ]; then
    echo "Error: inputs directory not found."
    exit 1
fi

# Check if required files exist
if [ $REXTREMA == "1" ] #In this case, extra files are needed
then
  REQUIRED_FILES=("prod.mdin" "feneb.in" "feneb.extrema1" "feneb.extrema2" "$TOPOLOGY")
else
  REQUIRED_FILES=("prod.mdin" "feneb.in" "$TOPOLOGY")
fi
for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "inputs/$file" ]; then
        echo "Error: Required file $file not found in inputs directory."
        exit 1
    fi
done

for ((i=STARTSTEP; i<=MAXSTEPS; i++)); # Optimization loop
do
        mkdir -p $i #Creates a directory for the $i-th optimization step
        cd $i
        #Copy input files and topology
        cp ../inputs/$MDIN .
        cp ../inputs/feneb.* .
        cp ../inputs/$TOPOLOGY  .
        #From now on we need to know if the extremes are fixed or not
        if [ $REXTREMA == "1" ] #If the extremes of the band are fixed
        then
          STARTREP=2
          ENDREP=$((NIMAGES-1))
        else
          STARTREP=1
          ENDREP=$((NIMAGES))
        fi
        #Copy coordinates from previous optimization step ("0" if this is the first optimization step)
        j=$(($i-1|bc)) #Previous optimization step
        if [ $i == "1" ] #If this is the first optimization step, copy _r_ files to _f_
          then
          for ((k=STARTREP; k<=ENDREP; k++));
          do
            cp ../$j/${NAME}_r_${k}.rst7 .
            cp ${NAME}_r_${k}.rst7 ${NAME}_fprev_${k}.rst7
          done
        else #copy _f_ files from previous step and call them _fprev_
          for ((k=STARTREP; k<=ENDREP; k++));
          do
            cp ../$j/${NAME}_o_${k}.rst7 ${NAME}_r_${k}.rst7
            cp ../$j/${NAME}_f_${k}.rst7 ${NAME}_fprev_${k}.rst7
          done
        fi
        echo "Running MD"
	#If M < N, then we need to split the MD runs in packages. A smarter option would be
	#to implement the FENEB code in the MPI version of sander, but I don't want to patch
	#the AMBER code.
  if [ $REXTREMA == "1" ] #If the extremes of the band are fixed
  then
    NRUNS=$((NIMAGES-2))
  else
    NRUNS=$((NIMAGES))
  fi

	NPACKAGES=$((NRUNS/NCPU))
	#Note NPACKAGES is rounded down. For example, if M=8 and NRUNS=23 (25 images with fixed extremes),
  #NPACKAGES will be equal to 2. So, after running 2*8=16 MD runs, we still need to run the remaining
	#NRUNS-(NPACKAGES*M) runs.

  FROM=$((STARTREP))
	UPTO=$((FROM+NCPU))
        for ((i=1; i<=NPACKAGES; i++)); # Start running each PACKAGE of M MD simulations
        do
          for ((k=FROM;k<UPTO;k++)); # Start running M-1 MD
          do
            $SANDER -O -i prod.mdin \
                       -o prod_${k}.out \
                       -p $TOPOLOGY \
                       -c ${NAME}_fprev_${k}.rst7 \
                       -r ${NAME}_f_${k}.rst7 \
                       -x ${NAME}_f_${k}.nc \
                       -ref ${NAME}_r_${k}.rst7 &
          done
	  #Run the last MD (of this package), and waits until its finished
          $SANDER -O -i prod.mdin \
                  -o prod_${k}.out \
                  -p $TOPOLOGY \
                  -c ${NAME}_fprev_${k}.rst7 \
                  -r ${NAME}_f_${k}.rst7 \
                  -x ${NAME}_f_${k}.nc \
	          -ref ${NAME}_r_${k}.rst7
          #Checks that all Images of this package have finished
          count=0
          while [ $count -lt $NCPU ];
          do
            count=0
            for ((l=FROM; l<=UPTO; l++));
            do
              if  grep -s -q -F "wallclock()" "prod_${l}.out";
              then
                count=$((count+1))
              else
                echo "image number $l has not finished"
              fi
            done
            if [ $count == $NCPU ]
            then
              echo "all Images of package $i have finished"
            else
              echo "taking a" $NAPTIME $NAPUNITS " long nap..."
	            echo "..."
              sleep $NAPTIME$NAPUNITS
            fi
          done
          FROM=$((k+1))
          UPTO=$((FROM+NCPU))
	done
	#Runs remaining MD simulations (if any)
        UPTO=$((ENDREP))
        for ((k=FROM; k<UPTO; k++)); # Starts in k+1 image, according to last FROM update
        do
          $SANDER -O -i prod.mdin \
                     -o prod_${k}.out \
                     -p $TOPOLOGY \
                     -c ${NAME}_fprev_${k}.rst7 \
                     -r ${NAME}_f_${k}.rst7 \
                     -x ${NAME}_f_${k}.nc \
                     -ref ${NAME}_r_${k}.rst7 &
        done
        #Run the last remaining MD, and waits until its finished
        $SANDER -O -i prod.mdin \
                   -o prod_${k}.out \
                   -p $TOPOLOGY \
                   -c ${NAME}_fprev_${k}.rst7 \
                   -r ${NAME}_f_${k}.rst7 \
                   -x ${NAME}_f_${k}.nc \
                   -ref ${NAME}_r_${k}.rst7
	#Checks that all remaining Images have finished
	NREMAINING=$((ENDREP-1-FROM))
        count=0
        while [ $count -lt $NREMAINING ];
        do
          count=0
          for ((l=FROM; l<=UPTO; l++));
          do
          if  grep -s -q -F "wallclock()" "prod_${l}.out";
          then
            count=$((count+1))
          else
            echo "image number $l has not finished"
          fi
          done
          if [ $count == $NREMAINING ]
          then
            echo "all remaining Images have finished"
          else
            echo "taking a" $NAPTIME $UNITS " long nap..."
            echo "..."
            sleep $NAPTIME$UNITS
          fi
        done

	#Run feneb
        echo "Running feneb optimization"
        $FENEB

	if [ $DELETENC == "1" ] #Delete .nc files
        then
          rm *.nc
  fi

	for ((k=STARTREP; k<=ENDREP; k++)); #Copy files for next movement
        do
          cp ${NAME}_o_${k}.rst7 _r_${k}.rst7
        done

        if [ $GREPEVOLUTION == "1" ] #Copy optimization information to .dat files
        then
          GRADPERP=$(grep "Band max force:" feneb.out|awk '{print $4}')
          cat profile.dat >> ../bandevolution.dat
          echo " " >> ../bandevolution.dat
          echo $i $GRADPERP >> ../maxgradevolution.dat
        fi
        echo "Step: "$i " finished"
        cd ..
done
