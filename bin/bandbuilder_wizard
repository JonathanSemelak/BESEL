#!/bin/bash
#-------------------------------------------------------------------------------------------------------------
# This is a tool generate an initial band for a FENEB optimization
# Written by Jonathan A. Semelak
#-------------------------------------------------------------------------------------------------------------

print_help() {
  echo
  echo "----------------------------------------------------------------------------------------------------------------------"
  echo "                                                  BANDBUILDER WIZARD "
  echo "----------------------------------------------------------------------------------------------------------------------"
  echo
  echo "Welcome to Bandbuilder Wizard, a tool designed to automate the generation of an initial band for a FENEB optimization"
  echo
  echo "USAGE:"
  echo "bandbuilder_wizard [OPTIONS]"
  echo
  echo "OPTIONS:"
  echo "-b  Specify the path to bandbuilder [default: bandbuilder]"
  echo "-m  Specify if a merged .nc file should be generated (enter T for True) [default: F]"
  echo "-c  Center and image coordinates (only needed if -m T) [default: F]"
  echo "-k Amber mask to center the images at (only needed if -c T) [default: RCS atoms]"
  echo "-cp Specify the path to cptraj (only needed if -m or -c are T) [default: cpptraj]"
  echo "-g  Growth method for generating the initial band [default: F]"
  echo "-v  Turn on bidirectional Growth method for generating the initial band [default: F]"
  echo "-d  Delete .nc files generated during Growth method simulation [default: F]"
  echo "-s  Specify the path to sander or pmemd (only needed if -g T) [default: sander]"
  echo "-i  Name of the input file for the dynamics simulations  (only needed if -g T) [growth.mdin: F]"
  echo "----------------------------------------------------------------------------------------------------------------------"
  echo "NOTES:"
  echo "1. The following files must be provided in the 'inputs' folder:"
  echo "    - bandbuilder.in file"
  echo "    - Reactants and products .rst7 files with the names specified in bandbuilder.in (rcfile and pcfile)"
  echo "    - The topology file named PREFIX.prmtop, where PREFIX is read from the bandbuilder.in file (prefix)"
  echo "    - In case -g is set to True, a sander (or pmemd) input  (growth.mdin by default, as specified by -i)"
  echo
}

#-------- Defaults
BANDBUILDER=bandbuilder                               #Should be replaced by the corresponding path to feneb
CPPTRAJ=cpptraj                                       #Should be replaced by the corresponding path to cpptraj
SANDER=sander                                         #Should be replaced by the corresponding path to sander
MDIN=growth.mdin                                      #Sander input
GROWTH=F
BIDIRECTIONAL=F
DELETENC=F
MERGE=F
CENTER=F
CENTERMASK=RCS
#--------

# Parse command line arguments
while getopts "hb:m:c:k:cp:g:v:d:s:i:" opt; do
  case ${opt} in
    h ) print_help
        exit 0
      ;;
    b ) BANDBUILDER=$OPTARG
      ;;
    m ) MERGE=$OPTARG
      ;;
    c ) CENTER=$OPTARG
      ;;
    k ) CENTERMASK=$OPTARG
      ;;
    cp ) CPPTRAJ=$OPTARG
      ;;
    g ) GROWTH=$OPTARG
      ;;
    v ) BIDIRECTIONAL=$OPTARG
      ;;
    d ) DELETENC=$OPTARG
      ;;
    s ) SANDER=$OPTARG
      ;;
    i ) MDIN=$OPTARG
      ;;
    * ) echo "Invalid option"
        exit 1
      ;;
  esac
done

# Function to check if a variable is a number
is_num() {
  if ! echo "$1" | grep -E -q '^[0-9]+$'; then
    echo "Error: $2 is not a number."
    exit 1
  fi
}

# Before doing anything, prints the print_help
print_help

# Check if MERGE is either 'T' or 'F'
if ! echo "$MERGE" | grep -E -q '^[TF]$'; then
  echo "Error: MERGE must be either 'T' or 'F'."
  exit 1
fi

# Check if GROWTH is either 'T' or 'F'
if ! echo "$GROWTH" | grep -E -q '^[TF]$'; then
  echo "Error: GROWTH must be either 'T' or 'F'."
  exit 1
fi

# Check if inputs directory exists
if [ ! -d "inputs" ]; then
    echo "Error: inputs directory not found."
    exit 1
fi

# Check if banbuilder.in file exist
REQUIRED_FILES=("bandbuilder.in")
for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "inputs/$file" ]; then
        echo "Error: Required file $file not found in inputs directory."
        exit 1
    fi
done

# Check if rcfile and pcfile are defined by inspecting the bandbuilder.in file
if  grep -s -q -F "rcfile" "inputs/bandbuilder.in";
then
  REACTANTSFILE=$(grep rcfile inputs/bandbuilder.in|awk '{print $2}')
else
  echo "Error: Reactants coordinates file is not specified in bandbuilder.in (rcfile)"
  exit 1
fi
if  grep -s -q -F "pcfile" "inputs/bandbuilder.in";
then
  PRODUCTSFILE=$(grep pcfile inputs/bandbuilder.in|awk '{print $2}')
else
  echo "Error: Products coordinates file is not specified in bandbuilder.in (pcfile)"
  exit 1
fi
# Check if required files exist
REQUIRED_FILES=("${REACTANTSFILE}" "${PRODUCTSFILE}")
for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "inputs/$file" ]; then
        echo "Error: Required file $file not found in inputs directory."
        exit 1
    fi
done

# Check if a TS candidate is intented to be used
if  grep -s -q -F "usets" "inputs/bandbuilder.in";
then
  USETS=$(grep usets inputs/bandbuilder.in|awk '{print $2}')
  # Check if USETS is T or F
  USETS=$(echo "${USETS}" | tr -d '[:space:]')
  if ! echo "${USETS}" | grep -E -q '^[TF]$'; then
    echo "Error: ${USETS} must be either 'T' or 'F'."
    exit 1
  fi
else
  USETS=F
fi
# If USETS is true, check if a TS candidate file is provided
if [ "$USETS" == "T" ]; then
  if  grep -s -q -F "tsfile" "inputs/bandbuilder.in";
  then
    TSCANDIDATEFILE=$(grep tsfile inputs/bandbuilder.in|awk '{print $2}')
  else
    echo "Error: Transition state candidate coordinates file is not specified in bandbuilder.in (tsfile)"
    exit 1
  fi
  # Check if required files exist
  REQUIRED_FILES=("${TSCANDIDATEFILE}")
  for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "inputs/$file" ]; then
        echo "Error: Required file $file not found in inputs directory."
        exit 1
    fi
  done
fi

# Determine NIMAGES by inspecting the bandbuilder.in file
if  grep -s -q -F "nrep" "inputs/bandbuilder.in";
then
  NIMAGES=$(grep nrep inputs/bandbuilder.in|awk '{print $2}')
  # Check if NIMAGES is a number
  is_num "$NIMAGES" "NIMAGES"
else
  echo "Error: Number of images not found in bandbuilder.in (nrep)"
  exit 1
fi
# Check if the number of images is greater than 2
if [ "$NIMAGES" -le 2 ]; then
  if [ "$NIMAGES" -eq 1 ]; then
    echo "NIMAGES=1 did you mean to perform a free energy optimization?"
  else
    echo "Error: NIMAGES must be greater than 2."
    exit 1
  fi
fi

# Determine PREFIX by inspecting the bandbuilder.in file
if  grep -s -q -F "prefix" "inputs/bandbuilder.in";
then
  NAME=$(grep prefix inputs/bandbuilder.in|awk '{print $2}')
  TOPOLOGY=${NAME}.prmtop
else
  echo "Error: Prefix for prmtop and coordinates not found in bandbuilder.in (prefix)"
  exit 1
fi

# Now that prefix is set, search for TOPOLOGY
REQUIRED_FILES=("$TOPOLOGY")
for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "inputs/$file" ]; then
        echo "Error: Required file $file not found in inputs directory."
        exit 1
    fi
done

# In case the method is growth, check that the required files exist,
# and that the required keywords are properly set
if [ "$GROWTH" == "T" ]; then
  REQUIRED_FILES=("${MDIN}")
  for file in "${REQUIRED_FILES[@]}"; do
      if [ ! -f "inputs/$file" ]; then
          echo "Error: GROWTH option enabled, but required file $file not found in inputs directory (growth)"
          exit 1
      fi
  done
  # Check if BIDIRECTIONAL is either 'T' or 'F'
  if ! echo "$BIDIRECTIONAL" | grep -E -q '^[TF]$'; then
    echo "Error: BIDIRECTIONAL must be either 'T' or 'F'."
    exit 1
  fi
  # Check if DELETENC is either 'T' or 'F'
  if ! echo "$DELETENC" | grep -E -q '^[TF]$'; then
    echo "Error: DELETENC must be either 'T' or 'F'."
    exit 1
  fi
fi

# In CPPTRAJ will be used, check that the path is correctly set
if [ "$MERGE" == "T" ]; then
  ISWORDVERSION="notVersion"
  ISWORDVERSION=$($CPPTRAJ --version|awk '{print $2}')
  if [ "$ISWORDVERSION" != "Version" ]; then
      echo "Error: MERGE option enabled, but CPPTRAJ not found (see -cp option)"
      exit 1
  fi
fi

# LOOK FOR SANDER
if [ "$GROWTH" == "T" ]; then
  ISWORDVERSION="notVersion"
  ISWORDVERSION=$($SANDER --version|awk '{print $2}')
  if [ "$ISWORDVERSION" != "Version" ]; then
      echo "Error: GROWTH option enabled, but $SANDER not found (see -s option)"
      exit 1
  fi
fi

# LOOK FOR BANDBUILDER
ISWORDVERSION="notVersion"
ISWORDVERSION=$($BANDBUILDER --version|awk '{print $2}')
if [ "$ISWORDVERSION" != "Version" ]; then
    echo "Error: $BANDBUILDER not found (see -b option)"
    exit 1
fi

# Check if a the IDPP method will be used
if  grep -s -q -F "idpp" "inputs/bandbuilder.in";
then
  IDPP=$(grep idpp inputs/bandbuilder.in|awk '{print $2}')
  # Check if USETS is T or F
  IDPP=$(echo "${IDPP}" | tr -d '[:space:]')
  if ! echo "${IDPP}" | grep -E -q '^[TF]$'; then
    echo "Error: ${IDPP} must be either 'T' or 'F'."
    exit 1
  fi
else
  IDPP=F
fi
# IF IDPP is True, check that nmax is numeric
if [ "$IDPP" == "T" ]; then
  if  grep -s -q -F "nmax" "inputs/bandbuilder.in";
  then
    NMAX=$(grep nrep inputs/bandbuilder.in|awk '{print $2}')
    # Check if NMAX
    is_num "$NMAX" "NAMX"
fi
fi

# Check if CENTER is either 'T' or 'F'
if ! echo "$CENTER" | grep -E -q '^[TF]$'; then
  echo "Error: CENTER must be either 'T' or 'F'."
  exit 1
fi

# If images will be centered and imaged, look if center mask is RCS
if [ "$CENTER" == "T" ]; then
  CENTERMASKISRCS=F
  if [ "$CENTERMASK" == "RCS" ]; then
  CENTERMASKISRCS=T
  CENTERMASK=$(grep '^mask' inputs/bandbuilder.in | awk '{
     printf "\047@"
     for (i=2; i<=NF; i++) {
        printf $i
        if (i < NF) printf ","
    }
    printf "\047"
  }')
  fi
fi

echo "----------------------------------------------------------------------------------------------------------------------"
echo "                                          STARTING THE BAND GENERATION"
echo "----------------------------------------------------------------------------------------------------------------------"

mkdir -p bandbuilder-run-dir
cd  bandbuilder-run-dir
cp ../inputs/* .

if [ "$IDPP" == "T" ]; then
  echo " Images will be generated using the Image Dependent Pair Potential method"
  echo " This may take a few seconds..."
else
  echo " Images will be generated with a Linear Interpolation"
fi

# If images will be centered and imaged, look if center mask is RCS
if [ "$CENTER" == "T" ]; then
  echo " Images will be centered and imaged with CPPTRAJ"
  if [ "$CENTERMASKISRCS" == "T" ]; then
  echo " Atom mask will be the atoms integrating the Reaction Coordinate Space (mask in bandbuilder.in)"
  fi
  echo " Atom mask is:"
  echo " $CENTERMASK"
  echo " Running quick test to check this mask is correctly specified"
  echo " Running CPPTRAJ..."
  echo "trajin ${REACTANTSFILE}" > input.cpptraj
  echo "center ${CENTERMASK} origin" >> input.cpptraj
  echo "image origin familiar" >> input.cpptraj
  $CPPTRAJ $TOPOLOGY input.cpptraj >> cpptraj_test.log
  if  grep -s -q -F "RUN END" cpptraj_test.log;
  then
    echo " Test passed"
    echo " Running Interpolation..."
    rm cpptraj_test.log
    rm input.cpptraj
  else
    echo "Error: Center mask seems to be wrong. Check the cpptraj_test.log file."
    exit 1
  fi
fi


$BANDBUILDER

if [ "$GROWTH" == "T" ]; then
echo " The Growth method will be used to improve the initial band guess!"
echo " A total of $((NIMAGES-2)) simulations will be run"
if [ "$BIDIRECTIONAL" == "T" ]; then
echo " Note that the reactants and products coordinates files will be the same as rcfile and pcfile"
cp ${REACTANTSFILE} ${NAME}_1.rst7
cp ${PRODUCTSFILE} ${NAME}_${NIMAGES}.rst7
cp ${REACTANTSFILE} ${NAME}_initial_1.rst7
cp ${PRODUCTSFILE} ${NAME}_initial_${NIMAGES}.rst7
FROM=2
UPTO=$(((NIMAGES-2)/2))
UPTO=$((UPTO+1))
echo " Running images from $FROM to $UPTO (starting with reactants coordinates)"
for ((k=FROM;k<=UPTO;k++)); # Start running MD
do
  echo " Running image ${k}..."
  j=$((k-1))
  mv ${NAME}_${k}.rst7 ${NAME}_initial_${k}.rst7
  $SANDER -O -i ${MDIN} \
             -o ${NAME}_${k}.out \
             -p ${TOPOLOGY} \
             -c ${NAME}_${j}.rst7 \
             -r ${NAME}_${k}.rst7 \
             -x ${NAME}_${k}.nc \
             -ref ${NAME}_initial_${k}.rst7
done
FROM=$((NIMAGES-1))
UPTO=$(((NIMAGES-2)/2))
UPTO=$((UPTO+1))
echo " Running images from $FROM to $((UPTO+1)) (starting with products coordinates)"
for ((k=FROM;k>UPTO;k--)); # Start running MD
do
  echo " Running image ${k}..."
  j=$((k+1))
  mv ${NAME}_${k}.rst7 ${NAME}_initial_${k}.rst7
  $SANDER -O -i ${MDIN} \
             -o ${NAME}_${k}.out \
             -p ${TOPOLOGY} \
             -c ${NAME}_${j}.rst7 \
             -r ${NAME}_${k}.rst7 \
             -x ${NAME}_${k}.nc \
             -ref ${NAME}_initial_${k}.rst7
done
else
  echo " Note that the reactants coordaintes file will be the same as rcfile"
  cp ${REACTANTSFILE} ${NAME}_1.rst7
  cp ${REACTANTSFILE} ${NAME}_initial_1.rst7
  FROM=2
  UPTO=$((NIMAGES))
  echo " Running images from $FROM to $UPTO (starting with reactants coordinates)"
  for ((k=FROM;k<=UPTO;k++)); # Start running MD
  do
    echo " Running image ${k}..."
    j=$((k-1))
    mv ${NAME}_${k}.rst7 ${NAME}_initial_${k}.rst7
    $SANDER -O -i ${MDIN} \
               -o ${NAME}_${k}.out \
               -p ${TOPOLOGY} \
               -c ${NAME}_${j}.rst7 \
               -r ${NAME}_${k}.rst7 \
               -x ${NAME}_${k}.nc \
               -ref ${NAME}_initial_${k}.rst7
  done
fi
FROM=2
if [ "$BIDIRECTIONAL" == "T" ]; then
  UPTO=$((NIMAGES-1))
else
  UPTO=$((NIMAGES))
fi
echo " Saving restraint energy to restraint_evolution.dat file"
rm -f restraint_evolution.dat
for ((k=FROM;k<=UPTO;k++)); # Start running MD
do
awk -F'=' '/RESTRAINT/ { for (i=1; i<=NF; i++) { if ($i ~ /RESTRAINT/) print $(i+1) } }' ${NAME}_${k}.out| awk '{$1=$1};1' | head -n -2 >> restraint_evolution.dat
echo "" >> restraint_evolution.dat
done

if [ "$DELETENC" == "T" ]; then
  rm *.nc
fi
if [ "$CENTER" == "T" ]; then
  echo " Now the initial images will be centered and imaged, using CPPTRAJ"
  echo " Running CPPTRAJ..."
  for ((i=1; i<=NIMAGES; i++));
  do
  echo "trajin ${NAME}_initial_$i.rst7" >> input.cpptraj
  echo "center ${CENTERMASK} origin" >> input.cpptraj
  echo "image origin familiar" >> input.cpptraj
  echo "trajout temp.rst7 restart" >> input.cpptraj
  $CPPTRAJ $TOPOLOGY input.cpptraj >> cpptraj.log
  mv temp.rst7 ${NAME}_initial_${i}.rst7
  rm input.cpptraj
  done
fi
mkdir -p ../STEP-0-INITIAL
if [ "$MERGE" == "T" ]; then
  echo " Images will be merged into the file ${NAME}_initial_BAND.nc, using CPPTRAJ"
  echo " Running CPPTRAJ..."
  for ((i=1; i<=NIMAGES; i++));
  do
  echo "trajin ${NAME}_initial_$i.rst7" >> input.cpptraj
  done
  echo "trajout ${NAME}_INITIAL_BAND_0.nc netcdf" >> input.cpptraj
  $CPPTRAJ $TOPOLOGY input.cpptraj >> cpptraj.log
  rm input.cpptraj
  mv ${NAME}_INITIAL_BAND_0.nc ../STEP-0-INITIAL/.
fi
mv *_r_initial_*.rst7 ../STEP-0-INITIAL/.
fi
if [ "$CENTER" == "T" ]; then
  echo " Now the images will be centered and imaged, using CPPTRAJ"
  echo " Running CPPTRAJ..."
  for ((i=1; i<=NIMAGES; i++));
  do
  echo "trajin ${NAME}_$i.rst7" >> input.cpptraj
  echo "center ${CENTERMASK} origin" >> input.cpptraj
  echo "image origin familiar" >> input.cpptraj
  echo "trajout temp.rst7 restart" >> input.cpptraj
  $CPPTRAJ $TOPOLOGY input.cpptraj >> cpptraj.log
  mv temp.rst7 ${NAME}_${i}.rst7
  rm input.cpptraj
  done
fi
mkdir -p ../STEP-0
if [ "$MERGE" == "T" ]; then
  echo " Images will be merged into the file ${NAME}_BAND.nc, using CPPTRAJ"
  echo " Running CPPTRAJ..."
  for ((i=1; i<=NIMAGES; i++));
  do
  echo "trajin ${NAME}_$i.rst7" >> input.cpptraj
  done
  echo "trajout ${NAME}_BAND_0.nc netcdf" >> input.cpptraj
  $CPPTRAJ $TOPOLOGY input.cpptraj >> cpptraj.log
  rm input.cpptraj
  mv ${NAME}_BAND_0.nc ../STEP-0/.
fi
#Move images to the corresponding file
mv *_r_*.rst7 ../STEP-0/.
echo " If everything worked smoothly, you will find the images in the STEP-0 folder"
