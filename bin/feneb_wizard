#!/bin/bash
#-------------------------------------------------------------------------------------------------------------
# This is an example script to run a FENEB optimization starting with
# an initial band of NIMAGES images, and running them in parallel.
#
# It is assumed that at least NCPU cpu threads are available.
#
# Written by Jonathan A. Semelak
#-------------------------------------------------------------------------------------------------------------
SANDER=sander                                         #Should be replaced by the corresponding path to sander
FENEB=feneb                                           #Should be replaced by the corresponding path to feneb
MDIN=prod.mdin                                        #Sander input
NIMAGES=15                                            #Number of images
NCPU=1                                                #Number of available CPU threads
STARTSTEP=1                                           #Starting optimization step.
MAXSTEPS=10                                           #Maximum optimization steps to be performed.
DELETENC=T                                            #Delete .nc files after processing ("1" for True)
GREPEVOLUTION=T                                       #Append band and maxgrad evolution ("1" for True)
NAPTIME=10                                            #How long should the script sleep
NAPUNITS=s                                            #In which units (h,s,m)
RESTART=F                                            #In which units (h,s,m)
#-------------------------------------------------------------------------------------------------------------

# Function to print a help message
# Function to print a help message
print_help() {
  echo
  echo "----------------------------------------------------------------------------------------------------------------------"
  echo "                                                  FENEB WIZARD "
  echo "----------------------------------------------------------------------------------------------------------------------"
  echo
  echo "Welcome to Feneb Wizard, a tool designed to automate the running of Feneb calculations."
  echo
  echo "USAGE:"
  echo "feneb_wizard [OPTIONS]"
  echo
  echo "OPTIONS:"
  echo "-s  Specify the path to sander [default: sander]"
  echo "-f  Specify the path to feneb [default: feneb]"
  echo "-m  Specify the sander input [default: prod.mdin]"
  echo "-c  Specify the number of available CPU threads [default: 1]"
  echo "-x  Specify the starting optimization step [default: 1]"
  echo "-d  Specify the maximum optimization steps to be performed [default: 10]"
  echo "-g  Delete .nc files after processing (enter T for True) [default: T]"
  echo "-a  Append band and maxgrad evolution (enter T for True) [default: T]"
  echo "-u  Set sleep duration of the script [default: 10]"
  echo "-v  Specify the units for sleep duration (s for seconds, m for minutes, d for days) [default: s]"
  echo "-r  Resume a previous simulation (enter T for True) [default: F]"
  echo "----------------------------------------------------------------------------------------------------------------------"
  echo "NOTES:"
  echo "1. The following files must be provided in the 'inputs' folder:"
  echo "    - feneb.in file and any other necessary feneb.* file (like feneb.extrema1 and feneb.extrema2)"
  echo "    - A sander input for the MD simulations (prod.mdin by default, as specified by -m)"
  echo "    - The topology file named PREFIX.prmtop, where PREFIX is read from the feneb.in file (prefix)"
  echo
  echo "2. The 'STEP-(K-1)' folder:"
  echo "   In each optimization step (K), the simulation is run in a 'STEP-K' folder, with the restraint coordinates"
  echo "   taken from the previous one. This folder is automatically generated by this script, but for the first step (-x 1),"
  echo "   a 'STEP-0' folder must be manually generated."
  echo
  echo "3. This script checks if all the MD runs have finished before executing the feneb code."
  echo "   If they haven't, the script sleeps for a predefined time (as set by -u and -v) and checks again."
  echo "   Typically, only a few minutes (or even seconds) are necessary."
  echo
}


# Parse command line arguments
while getopts "hs:f:m:c:i:x:d:g:a:u:r:" opt; do
  case ${opt} in
    h ) print_help
        exit 0
      ;;
    s ) SANDER=$OPTARG
      ;;
    f ) FENEB=$OPTARG
      ;;
    m ) MDIN=$OPTARG
      ;;
    c ) NCPU=$OPTARG
        if ! [[ "$NCPU" =~ ^[0-9]+$ ]]
        then
          echo "Error: -c option requires a numeric argument."
          exit 1
        fi
      ;;
    x ) STARTSTEP=$OPTARG
        if ! [[ "$STARTSTEP" =~ ^[0-9]+$ ]]
        then
          echo "Error: -x option requires a numeric argument."
          exit 1
        fi
      ;;
    d ) MAXSTEPS=$OPTARG
        if ! [[ "$MAXSTEPS" =~ ^[0-9]+$ ]]
        then
          echo "Error: -d option requires a numeric argument."
          exit 1
        fi
      ;;
    g ) DELETENC=$OPTARG
      ;;
    a ) GREPEVOLUTION=$OPTARG
      ;;
    u ) NAPTIME=$OPTARG
        if ! [[ "$NAPTIME" =~ ^[0-9]+$ ]]
        then
          echo "Error: -u option requires a numeric argument."
          exit 1
        fi
      ;;
    v ) UNITS=$OPTARG
      ;;
    r ) RESTART=$OPTARG
      ;;
    * ) echo "Invalid option"
        exit 1
      ;;
  esac
done

# Function to check if a variable is a number
is_num() {
  if ! echo "$1" | grep -E -q '^[0-9]+$'; then
    echo "Error: $2 is not a number."
    exit 1
  fi
}

# Before doing anything, prints the print_help
print_help

# Check if the number of images is greater than 2
is_num "$NIMAGES" "NIMAGES"
if [ "$NIMAGES" -le 2 ]; then
  if [ "$NIMAGES" -eq 1 ]; then
    echo "NIMAGES=1 did you mean to perform a free energy optimization?"
  else
    echo "Error: NIMAGES must be greater than 2."
    exit 1
  fi
fi

# Check if NAPUNITS is either 's', 'm', or 'd'
if ! echo "$NAPUNITS" | grep -E -q '^[smd]$'; then
  echo "Error: NAPUNITS must be either 's', 'm', or 'd'."
  exit 1
fi

# Check if NCPU is a number
is_num "$NCPU" "NCPU"

# Make sure NCPU is still a positive integer after any adjustments
if [ "$NCPU" -le 0 ]; then
  echo "Error: NCPU must be a positive integer."
  exit 1
fi


# Check if inputs directory exists
if [ ! -d "inputs" ]; then
    echo "Error: inputs directory not found."
    exit 1
fi

# Check if required files exist
REQUIRED_FILES=("feneb.in" "prod.mdin")
for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "inputs/$file" ]; then
        echo "Error: Required file $file not found in inputs directory."
        exit 1
    fi
done

# Check if the extremes are fixed by inspecting the feneb.in file
if  grep -s -q -F "rextrema" "inputs/feneb.in";
then
  REXTREMA=$(grep rextrema inputs/feneb.in|awk '{print $2}')
  # Check if REXTREMA is T or F
  REXTREMA=$(echo "${REXTREMA}" | tr -d '[:space:]')
  if ! echo "${REXTREMA}" | grep -E -q '^[TF]$'; then
    echo "Error: $REXTREMA must be either 'T' or 'F'."
    exit 1
  fi

else
  REXTREMA=F
fi

if [ "$REXTREMA" == "T" ]; then
  REQUIRED_FILES=("feneb.extrema1" "feneb.extrema2")
  for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "inputs/$file" ]; then
        echo "Error: REXTREMA=T in feneb.in but required file $file not found in inputs directory."
        exit 1
    fi
   done
fi
# Determine NIMAGES by inspecting the feneb.in file
if  grep -s -q -F "nrep" "inputs/feneb.in";
then
  NIMAGES=$(grep nrep inputs/feneb.in|awk '{print $2}')
  # Check if NIMAGES is a number
  is_num "$NIMAGES" "NIMAGES"
else
  echo "Error: The number of images not found in feneb.in (nrep)"
  exit 1
fi

# Determine PREFIX by inspecting the feneb.in file
if  grep -s -q -F "prefix" "inputs/feneb.in";
then
  NAME=$(grep prefix inputs/feneb.in|awk '{print $2}')
  TOPOLOGY=${NAME}.prmtop
else
  echo "Error: Prefix for prmtop and coordinates not found in feneb.in (prefix)"
  exit 1
fi

# Now that prefix is set, search for TOPOLOGY
REQUIRED_FILES=("$TOPOLOGY")
for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "inputs/$file" ]; then
        echo "Error: Required file $file not found in inputs directory."
        exit 1
    fi
done

# Check if STEP-STARTREP-1 directory exists
PREVSTEP=$((STARTSTEP-1|bc))
if [ ! -d "STEP-$PREVSTEP" ]; then
    echo "Error: STEP-$PREVSTEP directory not found."
    exit 1
fi

# Check if DELETENC, REXTREMA, and GREPEVOLUTION are either 'T' or 'F'
for var in "DELETENC" "GREPEVOLUTION"; do
  if ! echo "${!var}" | grep -E -q '^[TF]$'; then
    echo "Error: $var must be either 'T' or 'F'."
    exit 1
  fi
done

# Check NCPU against NIMAGES or NIMAGES-2 based on REXTREMA value
if [ "$REXTREMA" == "T" ]; then
  if [ "$NCPU" -gt "$(($NIMAGES - 2))" ]; then
    echo "NCPU cannot be larger than NIMAGES-2 when REXTREMA=1. Setting NCPU to NIMAGES-2."
    NCPU="$(($NIMAGES - 2))"
  fi
elif [ "$REXTREMA" == "F" ]; then
  if [ "$NCPU" -gt "$NIMAGES" ]; then
    echo "NCPU cannot be larger than NIMAGES when REXTREMA=0. Setting NCPU to NIMAGES."
    NCPU="$NIMAGES"
  fi
fi

#If M < N, then we need to split the MD runs in packages. A smarter option would be
#to implement the FENEB code in the MPI version of sander, but I don't want to patch
#the AMBER code.
if [ $REXTREMA == "T" ] #If the extremes of the band are fixed
then
  NRUNS=$((NIMAGES-2))
else
  NRUNS=$((NIMAGES))
fi

NPACKAGES=$((NRUNS/NCPU))
NREMAINING=$((NRUNS-NPACKAGES*NCPU))
STARTREP=$((OLDSTARTREP)) #Only necessary for restart option

echo "----------------------------------------------------------------------------------------------------------------------"
echo "                                          STARTING THE FENEB SIMULATION"
echo "----------------------------------------------------------------------------------------------------------------------"
echo " "
echo "The simulation will be parallelized according to the required number of"
echo "MD simulations to be performed and the number of cpu threads available."
echo " "
if [ $NREMAINING == '0' ]; then
  echo  "The $NRUNS  MD simulations will be run in $NPACKAGES packages of $NCPU each."
else
  echo  "The $NRUNS  MD simulations will be run in $NPACKAGES packages of $NCPU each"
  echo  "and an extra one with $NREMAINING simulations"
fi
#Note NPACKAGES is rounded down. For example, if M=8 and NRUNS=23 (25 images with fixed extremes),
#NPACKAGES will be equal to 2. So, after running 2*8=16 MD runs, we still need to run the remaining
#NRUNS-(NPACKAGES*M) runs.

for ((step=STARTSTEP; step<=MAXSTEPS; step++)); # Optimization loop
do
        echo "----------------"
        echo " STEP: $step  "
        echo "----------------"
        mkdir -p STEP-$step #Creates a directory for the $i-th optimization step
        cd STEP-$step
        #Copy input files and topology
        cp ../inputs/$MDIN .
        cp ../inputs/feneb.* .
        cp ../inputs/$TOPOLOGY  .
        #From now on we need to know if the extremes are fixed or not
        if [ $REXTREMA == "T" ] #If the extremes of the band are fixed
        then
          STARTREP=2
          ENDREP=$((NIMAGES-1))
        else
          STARTREP=1
          ENDREP=$((NIMAGES))
        fi
        #Copy coordinates from previous optimization step ("0" if this is the first optimization step)
        PREVSTEP=$((step-1|bc))
        if [ $step == "1" ] #If this is the first optimization step, copy _r_ files to _f_
          then
          for ((k=STARTREP; k<=ENDREP; k++));
          do
            cp ../STEP-${PREVSTEP}/${NAME}_r_${k}.rst7 .
            cp ${NAME}_r_${k}.rst7 ${NAME}_fprev_${k}.rst7
          done
        else #copy _f_ files from previous step and call them _fprev_
          for ((k=STARTREP; k<=ENDREP; k++));
          do
            cp ../STEP-${PREVSTEP}/${NAME}_o_${k}.rst7 ${NAME}_r_${k}.rst7
            cp ../STEP-${PREVSTEP}/${NAME}_f_${k}.rst7 ${NAME}_fprev_${k}.rst7
          done
        fi

        echo "Running MD"

        if [ $RESTART = 'T' ]; then
          if [ $step -eq $STARTSTEP ]; then
            echo "Trying to restart from incomplete simulation..."
            echo "Searching files..."
            seq_finished=T
            last_finished=$((STARTREP))
            l=$((STARTREP))
            while [ "$seq_finished" = "T" -a $l -le $ENDREP ];
            do
            if  grep -s -q -F "wallclock()" "${NAME}_${l}.out"; then
              seq_finished=T
              last_finished=$((l))
            fi
            done
            if [ $l -ge $STARTREP]; then
            echo "Images from $STARTREP to $l have finished"
            echo "Only the remaining $((NRUNS-l)) will be run during this first step"
            NRUNS=$((NRUNS-l))
            STARTREP=$((l+1))
            NPACKAGES=$((NRUNS/NCPU))
            NREMAINING=$((NRUNS-NPACKAGES*NCPU))
            echo "Only for this step, the remaining $((NRUNS-l)) will be run during this first step"
            if [ $NREMAINING == '0' ]; then
              echo  "The $((NRUNS-l))  MD simulations will be run in $NPACKAGES packages of $NCPU each."
            else
              echo  "The $((NRUNS-l))  MD simulations will be run in $NPACKAGES packages of $NCPU each"
              echo  "and an extra one with $NREMAINING simulations"
            fi
            fi
          else
            STARTREP=$((OLDSTARTREP))
            NPACKAGES=$((NRUNS/NCPU))
            NREMAINING=$((NRUNS-NPACKAGES*NCPU))
          fi
        fi

        FROM=$((STARTREP))
	      UPTO=$((FROM+NCPU-1))
        for ((i=1; i<=NPACKAGES; i++)); # Start running each PACKAGE of M MD simulations
        do
          echo "Running package $i (range from $FROM to $UPTO)"
          for ((k=FROM;k<UPTO;k++)); # Start running M-1 MD
          do
            $SANDER -O -i prod.mdin \
                       -o ${NAME}_${k}.out \
                       -p $TOPOLOGY \
                       -c ${NAME}_fprev_${k}.rst7 \
                       -r ${NAME}_f_${k}.rst7 \
                       -x ${NAME}_f_${k}.nc \
                       -ref ${NAME}_r_${k}.rst7 &
          done
	       #Run the last MD (of this package), and waits until its finished
          $SANDER -O -i prod.mdin \
                  -o ${NAME}_${k}.out \
                  -p $TOPOLOGY \
                  -c ${NAME}_fprev_${k}.rst7 \
                  -r ${NAME}_f_${k}.rst7 \
                  -x ${NAME}_f_${k}.nc \
	          -ref ${NAME}_r_${k}.rst7
          #Checks that all Images of this package have finished
          count=0
          while [ $count -lt $NCPU ];
          do
            count=0
            for ((l=FROM; l<=UPTO; l++));
            do
              if  grep -s -q -F "wallclock()" "${NAME}_${l}.out";
              then
                count=$((count+1))
              else
                echo "image number $l has not finished"
              fi
            done
            if [ "$count" == "$NCPU" ]
            then
              echo "all Images of package $i have finished"
            else
              echo "taking a" $NAPTIME $NAPUNITS " long nap..."
              sleep $NAPTIME$NAPUNITS
            fi
          done
          FROM=$((k+1))
          UPTO=$((FROM+NCPU-1))
        done #packages
	      #Runs remaining MD simulations (if any)
        if [ $NREMAINING != '0' ]; then
        UPTO=$((ENDREP))
        for ((k=FROM; k<UPTO; k++)); # Starts in k+1 image, according to last FROM update
        do
          $SANDER -O -i prod.mdin \
                     -o ${NAME}_${k}.out \
                     -p $TOPOLOGY \
                     -c ${NAME}_fprev_${k}.rst7 \
                     -r ${NAME}_f_${k}.rst7 \
                     -x ${NAME}_f_${k}.nc \
                     -ref ${NAME}_r_${k}.rst7 &
        done
        #Run the last remaining MD, and waits until its finished
        $SANDER -O -i prod.mdin \
                   -o ${NAME}_${k}.out \
                   -p $TOPOLOGY \
                   -c ${NAME}_fprev_${k}.rst7 \
                   -r ${NAME}_f_${k}.rst7 \
                   -x ${NAME}_f_${k}.nc \
                   -ref ${NAME}_r_${k}.rst7
	      #Checks that all remaining Images have finished
        count=0
        while [ $count -lt $NREMAINING ];
        do
          count=0
          for ((l=FROM; l<=UPTO; l++));
          do
          if  grep -s -q -F "wallclock()" "${NAME}_${l}.out";
          then
            count=$((count+1))
          else
            echo "image number $l has not finished"
          fi
          done
          if [ $count == $NREMAINING ]
          then
            echo "all remaining Images have finished"
          else
            echo "taking a" $NAPTIME $UNITS " long nap..."
            sleep $NAPTIME$UNITS
          fi
        done
        fi
	#Run feneb
        echo "Running feneb optimization"
        $FENEB

	if [ $DELETENC == "T" ] #Delete .nc files
        then
          rm *.nc
  fi

	for ((k=STARTREP; k<=ENDREP; k++)); #Copy files for next movement
        do
          cp ${NAME}_o_${k}.rst7 ${NAME}_r_${k}.rst7
  done

  if [ $GREPEVOLUTION == "T" ] #Copy optimization information to .dat files
  then
    GRADPERP=$(grep "Band max force:" feneb.out|awk '{print $4}')
    cat profile.dat >> ../bandevolution.dat
    echo " " >> ../bandevolution.dat
    echo $step $GRADPERP >> ../maxgradevolution.dat
  fi
    cd ..
done
echo "----------------------------------------------------------------------------------------------------------------------"
echo "                                             HAPPY LANDING"
echo "----------------------------------------------------------------------------------------------------------------------"
