#!/bin/bash
#-------------------------------------------------------------------------------------------------------------
# This is a tool to run a Free Energy optimization using a single CPU thread
#
# Written by Jonathan A. Semelak
#-------------------------------------------------------------------------------------------------------------
SANDER=sander                                         #Should be replaced by the corresponding path to sander
FENEB=feneb                                           #Should be replaced by the corresponding path to feneb
MDIN=prod.mdin                                        #Sander input
STARTSTEP=1                                           #Starting optimization step.
MAXSTEPS=10                                           #Maximum optimization steps to be performed.
DELETENC=T                                            #Delete .nc files after processing ("1" for True)
GREPEVOLUTION=T                                       #Append band and maxgrad evolution ("1" for True)
STOPIFCONVERGED=F                                     #Stop the simulation if convergence is achieved.
#-------------------------------------------------------------------------------------------------------------

print_help() {
  echo
  echo "----------------------------------------------------------------------------------------------------------------------"
  echo "                                                  FEOPT WIZARD "
  echo "----------------------------------------------------------------------------------------------------------------------"
  echo
  echo "Welcome to Feopt Wizard, a tool designed to automate the running of a Free Energy Optimizaion."
  echo
  echo "USAGE:"
  echo "feopt_wizard [OPTIONS]"
  echo
  echo "OPTIONS:"
  echo "-s  Specify the path to sander [default: sander]"
  echo "-f  Specify the path to feneb [default: feneb]"
  echo "-m  Specify the sander input [default: prod.mdin]"
  echo "-x  Specify the starting optimization step [default: 1]"
  echo "-d  Specify the maximum optimization steps to be performed [default: 10]"
  echo "-g  Delete .nc files after processing (enter T for True) [default: T]"
  echo "-a  Append maxgrad evolution (enter T for True) [default: T]"
  echo "----------------------------------------------------------------------------------------------------------------------"
  echo "NOTES:"
  echo "1. The following files must be provided in the 'inputs' folder:"
  echo "    - feneb.in file and any other necessary feneb.* file (like feneb.extrema1 and feneb.extrema2)"
  echo "    - A sander input for the MD simulations (prod.mdin by default, as specified by -m)"
  echo "    - The topology file named PREFIX.prmtop, where PREFIX is read from the feneb.in file (prefix)"
  echo
  echo "2. The 'STEP-(K-1)' folder:"
  echo "   In each optimization step (K), the simulation is run in a 'STEP-K' folder, with the restraint coordinates"
  echo "   taken from the previous one. This folder is automatically generated by this script, but for the first step (-x 1),"
  echo "   a 'STEP-0' folder must be manually generated."
  echo
}


# Parse command line arguments
while getopts "hs:f:m:x:d:g:a:" opt; do
  case ${opt} in
    h ) print_help
        exit 0
      ;;
    s ) SANDER=$OPTARG
      ;;
    f ) FENEB=$OPTARG
      ;;
    m ) MDIN=$OPTARG
      ;;
    x ) STARTSTEP=$OPTARG
        if ! [[ "$STARTSTEP" =~ ^[0-9]+$ ]]
        then
          echo "Error: -x option requires a numeric argument."
          exit 1
        fi
      ;;
    d ) MAXSTEPS=$OPTARG
        if ! [[ "$MAXSTEPS" =~ ^[0-9]+$ ]]
        then
          echo "Error: -d option requires a numeric argument."
          exit 1
        fi
      ;;
    g ) DELETENC=$OPTARG
      ;;
    a ) GREPEVOLUTION=$OPTARG
      ;;
    * ) echo "Invalid option"
        exit 1
      ;;
  esac
done

# Function to check if a variable is a number
is_num() {
  if ! echo "$1" | grep -E -q '^[0-9]+$'; then
    echo "Error: $2 is not a number."
    exit 1
  fi
}

# Before doing anything, prints the print_help
print_help

# Check if inputs directory exists
if [ ! -d "inputs" ]; then
    echo "Error: inputs directory not found."
    exit 1
fi

# Check if required files exist
REQUIRED_FILES=("feneb.in" "${MDIN}")
for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "inputs/$file" ]; then
        echo "Error: Required file $file not found in inputs directory."
        exit 1
    fi
done

# Determine NIMAGES by inspecting the feneb.in file
if  grep -s -q -F "nrep" "inputs/feneb.in";
then
  NIMAGES=$(grep nrep inputs/feneb.in|awk '{print $2}')
  # Check if NIMAGES is a number
  is_num "$NIMAGES" "NIMAGES"
else
  echo "Error: The number of images not found in feneb.in (nrep)"
  exit 1
fi

# Check if the number of images is equal to 1
is_num "$NIMAGES" "NIMAGES"
if [ "$NIMAGES" -ne 1 ]; then
    echo "Error: NIMAGES must be 1 for aFree Energy optimization."
    exit 1
fi

# Determine PREFIX by inspecting the feneb.in file
if  grep -s -q -F "prefix" "inputs/feneb.in";
then
  NAME=$(grep prefix inputs/feneb.in|awk '{print $2}')
  TOPOLOGY=${NAME}.prmtop
else
  echo "Error: Prefix for prmtop and coordinates not found in feneb.in (prefix)"
  exit 1
fi

# Now that prefix is set, search for TOPOLOGY
REQUIRED_FILES=("$TOPOLOGY")
for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "inputs/$file" ]; then
        echo "Error: Required file $file not found in inputs directory."
        exit 1
    fi
done

# Check if STEP-STARTREP-1 directory exists
PREVSTEP=$((STARTSTEP-1|bc))
if [ ! -d "STEP-$PREVSTEP" ]; then
    echo "Error: STEP-$PREVSTEP directory not found."
    exit 1
fi

# Check if DELETENC, REXTREMA, and GREPEVOLUTION are either 'T' or 'F'
for var in "DELETENC" "GREPEVOLUTION"; do
  if ! echo "${!var}" | grep -E -q '^[TF]$'; then
    echo "Error: $var must be either 'T' or 'F'."
    exit 1
  fi
done

# Determine STOPIFCONVERGED by inspecting the feneb.in file
if  grep -s -q -F "stopifconverged" "inputs/feneb.in";
then
  STOPIFCONVERGED=$(grep stopifconverged inputs/feneb.in|awk '{print $2}')
fi


echo "----------------------------------------------------------------------------------------------------------------------"
echo "                                          STARTING THE FEOPT SIMULATION"
echo "----------------------------------------------------------------------------------------------------------------------"
echo " "
echo "The restraint reference will be updated after each MD simulation."
echo " "

k=1 #The extreme is called PREFIX_1
for ((step=STARTSTEP; step<=MAXSTEPS; step++)); # Optimization loop
do
        echo "----------------"
        echo " STEP: $step  "
        echo "----------------"
        mkdir -p STEP-$step #Creates a directory for the $i-th optimization step
        cd STEP-$step
        #Copy input files and topology
        cp ../inputs/$MDIN .
        cp ../inputs/feneb.* .
        cp ../inputs/$TOPOLOGY  .

        #Copy coordinates from previous optimization step ("0" if this is the first optimization step)
        PREVSTEP=$((step-1|bc))
        if [ $step == "1" ] #If this is the first optimization step, copy _r_ files to _f_
          then
            cp ../STEP-${PREVSTEP}/${NAME}_r_${k}.rst7 .
            cp ${NAME}_r_${k}.rst7 ${NAME}_fprev_${k}.rst7
        else #copy _f_ files from previous step and call them _fprev_
            cp ../STEP-${PREVSTEP}/${NAME}_o_${k}.rst7 ${NAME}_r_${k}.rst7
            cp ../STEP-${PREVSTEP}/${NAME}_f_${k}.rst7 ${NAME}_fprev_${k}.rst7
        fi

        echo "Running MD"

        $SANDER -O -i ${MDIN} \
                   -o ${NAME}_${k}.out \
                   -p $TOPOLOGY \
                   -c ${NAME}_fprev_${k}.rst7 \
                   -r ${NAME}_f_${k}.rst7 \
                   -x ${NAME}_f_${k}.nc \
                   -ref ${NAME}_r_${k}.rst7

        echo "Running Free Energy optimization"
        $FENEB

	if [ $DELETENC == "T" ] #Delete .nc files
        then
          rm *.nc
  fi

  if [ $GREPEVOLUTION == "T" ] #Copy optimization information to .dat files
  then
    GRAD=$(grep "Max force:" feneb.out|awk '{print $3}')
    echo $step $GRAD >> ../maxgradevolution.dat
  fi

  if [ $STOPIFCONVERGED == "T" ] # Check convergence if required by STOPIFCONVERGED
  then
    if  grep -s -q -F "achieved" "feneb.out";
    then
      echo "Convergence achieved: Stopping simulation..."
      echo "----------------------------------------------------------------------------------------------------------------------"
      echo "                                                 HAPPY LANDING"
      echo "                                           FEOPT OPTIMIZATION CONVERGED"
      echo "----------------------------------------------------------------------------------------------------------------------"
      exit 1
    fi
  fi
  cd ..

done
echo "----------------------------------------------------------------------------------------------------------------------"
echo "                                              HAPPY LANDING"
echo "                                       MAXIMUM NUMBER OF STEPS REACHED"
echo "----------------------------------------------------------------------------------------------------------------------"
